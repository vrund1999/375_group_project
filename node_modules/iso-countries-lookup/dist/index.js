"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.search = void 0;

var _i18nIsoCountries = _interopRequireDefault(require("i18n-iso-countries"));

var _prepare = _interopRequireDefault(require("./prepare"));

var _countries = _interopRequireDefault(require("./data/countries.json"));

var search = function search() {
  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'official';

  var languages = _i18nIsoCountries["default"].langs(); // Iterate through every language to find country name


  for (var i = 0; i < languages.length; i++) {
    var language = languages[i];

    var countryNames = _i18nIsoCountries["default"].getNames(language);

    var countryCodes = Object.keys(countryNames);

    for (var h = 0; h < countryCodes.length; h++) {
      var countryCode = countryCodes[h];

      if (type === 'official') {
        var countryName = (0, _prepare["default"])(countryNames[countryCode]);
        if (input === countryName) return countryCode;
      } else {
        var countryNameTranslations = _countries["default"][countryCode];

        for (var j = 0; j < countryNameTranslations.length; j++) {
          if (countryNameTranslations[j] === input) return countryCode;
        }
      }
    }
  }

  return undefined;
};
/**
 * Check if input is country code
 * @param {string} input
 * @param {object} options
 * @returns {string|undefined}
 */


exports.search = search;

var checkCodes = function checkCodes() {
  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof input === 'number' || Number.isFinite(Number(input))) {
    if (Number(input) > 999) return undefined;

    if (options.numeric !== false) {
      var isNumeric = _i18nIsoCountries["default"].numericToAlpha2(input);

      if (isNumeric) return isNumeric;
      return undefined;
    }
  }

  var alpha3 = _i18nIsoCountries["default"].alpha2ToAlpha3(input.toString().toUpperCase());

  if (alpha3) return _i18nIsoCountries["default"].toAlpha2(alpha3);

  var alpha2 = _i18nIsoCountries["default"].alpha3ToAlpha2(input.toUpperCase());

  if (alpha2) return alpha2;
  return undefined;
};
/**
 * Lookup country
 * @param {string} input
 * @param {object} options
 * @returns {string|undefined}
 */


var lookup = function lookup() {
  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (typeof input !== 'string' && typeof input !== 'number') return undefined; // Check if its already an iso code

  var isCode = checkCodes(input, options);
  if (isCode) return isCode;
  var countryNameSearch = (0, _prepare["default"])(input, true);
  if (!countryNameSearch) return undefined; // Check if iso code

  isCode = checkCodes(countryNameSearch, options);
  if (isCode) return isCode; // Check if wrong country code

  if (countryNameSearch.length < 4) return undefined; // Search code by name

  var result = search(countryNameSearch, 'official');
  if (result) return result;
  return search(countryNameSearch, 'translations');
};

var _default = lookup;
exports["default"] = _default;
module.exports = lookup;